
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.nic.co/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisNicCoStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.nic.co/status_registered.txt"
        host         = "whois.nic.co"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, ["clientTransferProhibited"])

    def test_available(self):
        eq_(self.record.available, False)

    def test_domain(self):
        eq_(self.record.domain, "t.co")

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 4)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "ns1.p34.dynect.net")
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "ns2.p34.dynect.net")
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "ns3.p34.dynect.net")
        eq_(self.record.nameservers[3].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[3].name, "ns4.p34.dynect.net")

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].id, "868543810568A633")
        eq_(self.record.admin_contacts[0].name, "Domain Admin")
        eq_(self.record.admin_contacts[0].organization, "Twitter, Inc.")
        eq_(self.record.admin_contacts[0].address, "1355 Market Street\nSuite 900")
        eq_(self.record.admin_contacts[0].city, "San Francisco")
        eq_(self.record.admin_contacts[0].zip, "94103")
        eq_(self.record.admin_contacts[0].state, "California")
        eq_(self.record.admin_contacts[0].country, "United States")
        eq_(self.record.admin_contacts[0].country_code, "US")
        eq_(self.record.admin_contacts[0].phone, "+1.4152229670")
        eq_(self.record.admin_contacts[0].fax, "+1.4152220922")
        eq_(self.record.admin_contacts[0].email, "domains@twitter.com")

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('2010-04-26 07:50:40 GMT'))

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, "299")
        eq_(self.record.registrar.name, "CSC CORPORATE DOMAINS")

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].id, "365684910586C791")
        eq_(self.record.registrant_contacts[0].name, "Twitter, Inc.")
        eq_(self.record.registrant_contacts[0].organization, "Twitter, Inc.")
        eq_(self.record.registrant_contacts[0].address, "1355 Market Street\nSuite 900")
        eq_(self.record.registrant_contacts[0].city, "San Francisco")
        eq_(self.record.registrant_contacts[0].zip, "94103")
        eq_(self.record.registrant_contacts[0].state, "CA")
        eq_(self.record.registrant_contacts[0].country, "United States")
        eq_(self.record.registrant_contacts[0].country_code, "US")
        eq_(self.record.registrant_contacts[0].phone, "+1.4152229670")
        eq_(self.record.registrant_contacts[0].fax, "+1.4152220922")
        eq_(self.record.registrant_contacts[0].email, "domains@twitter.com")

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts.__class__.__name__, 'list')
        eq_(len(self.record.technical_contacts), 1)
        eq_(self.record.technical_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.technical_contacts[0].type, yawhois.record.Contact.TYPE_TECHNICAL)
        eq_(self.record.technical_contacts[0].id, "42101611057C7478")
        eq_(self.record.technical_contacts[0].name, "Tech Admin")
        eq_(self.record.technical_contacts[0].organization, "Twitter, Inc.")
        eq_(self.record.technical_contacts[0].address, "1355 Market Street\nSuite 900")
        eq_(self.record.technical_contacts[0].city, "San Francisco")
        eq_(self.record.technical_contacts[0].zip, "94103")
        eq_(self.record.technical_contacts[0].state, "California")
        eq_(self.record.technical_contacts[0].country, "United States")
        eq_(self.record.technical_contacts[0].country_code, "US")
        eq_(self.record.technical_contacts[0].phone, "+1.4152229670")
        eq_(self.record.technical_contacts[0].fax, "+1.4152220922")
        eq_(self.record.technical_contacts[0].email, "domains-tech@twitter.com")

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2013-10-14 13:03:24 GMT'))

    def test_domain_id(self):
        eq_(self.record.domain_id, "D740225-CO")

    def test_expires_on(self):
        eq_(self.record.expires_on.__class__.__name__, 'datetime')
        eq_(self.record.expires_on, time_parse('2016-04-25 23:59:59 GMT'))
