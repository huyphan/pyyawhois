
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.uniregistry.net/tattoo/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisUniregistryNetTattooStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.uniregistry.net/tattoo/status_registered.txt"
        host         = "whois.uniregistry.net"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'registered')

    def test_available(self):
        eq_(self.record.available, False)

    def test_domain(self):
        eq_(self.record.domain, "nic.tattoo")

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 4)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "a.ns.uniregistry.net")
        eq_(self.record.nameservers[0].ipv4, None)
        eq_(self.record.nameservers[0].ipv6, None)
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "tld.isc-sns.info")
        eq_(self.record.nameservers[1].ipv4, None)
        eq_(self.record.nameservers[1].ipv6, None)
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "tld.isc-sns.com")
        eq_(self.record.nameservers[2].ipv4, None)
        eq_(self.record.nameservers[2].ipv6, None)
        eq_(self.record.nameservers[3].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[3].name, "tld.isc-sns.net")
        eq_(self.record.nameservers[3].ipv4, None)
        eq_(self.record.nameservers[3].ipv6, None)

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].id, "tattoo-admin")
        eq_(self.record.admin_contacts[0].name, "Uniregistry admin contact")
        eq_(self.record.admin_contacts[0].organization, "Uniregistry, Corp")
        eq_(self.record.admin_contacts[0].address, "PO Box 1361")
        eq_(self.record.admin_contacts[0].city, "Grand Cayman")
        eq_(self.record.admin_contacts[0].zip, "KY1-1108")
        eq_(self.record.admin_contacts[0].state, "George Town")
        eq_(self.record.admin_contacts[0].country, None)
        eq_(self.record.admin_contacts[0].country_code, "KY")
        eq_(self.record.admin_contacts[0].phone, "+1.3457496263")
        eq_(self.record.admin_contacts[0].fax, "+1.3457496263")
        eq_(self.record.admin_contacts[0].email, "admin@nic.tattoo")
        eq_(self.record.admin_contacts[0].created_on, None)
        eq_(self.record.admin_contacts[0].updated_on, None)

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('2013-09-16 14:21:26 UTC'))

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, "9999")
        eq_(self.record.registrar.name, "Uniregistry, Corp.")
        eq_(self.record.registrar.organization, "Uniregistry, Corp.")
        eq_(self.record.registrar.url, None)

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].id, "uniregistry")
        eq_(self.record.registrant_contacts[0].name, "Uniregistry Registry Internal Resources")
        eq_(self.record.registrant_contacts[0].organization, "Uniregistry, Corp")
        eq_(self.record.registrant_contacts[0].address, "PO Box 1361")
        eq_(self.record.registrant_contacts[0].city, "Grand Cayman")
        eq_(self.record.registrant_contacts[0].zip, "KY1-1108")
        eq_(self.record.registrant_contacts[0].state, "George Town")
        eq_(self.record.registrant_contacts[0].country, None)
        eq_(self.record.registrant_contacts[0].country_code, "KY")
        eq_(self.record.registrant_contacts[0].phone, "+1.3457496263")
        eq_(self.record.registrant_contacts[0].fax, "+1.3457496263")
        eq_(self.record.registrant_contacts[0].email, "info+whois@uniregistry.com")
        eq_(self.record.registrant_contacts[0].created_on, None)
        eq_(self.record.registrant_contacts[0].updated_on, None)

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts.__class__.__name__, 'list')
        eq_(len(self.record.technical_contacts), 1)
        eq_(self.record.technical_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.technical_contacts[0].type, yawhois.record.Contact.TYPE_TECHNICAL)
        eq_(self.record.technical_contacts[0].id, "tattoo-tech")
        eq_(self.record.technical_contacts[0].name, "Uniregistry tech contact")
        eq_(self.record.technical_contacts[0].organization, "Uniregistry, Corp")
        eq_(self.record.technical_contacts[0].address, "PO Box 1361")
        eq_(self.record.technical_contacts[0].city, "Grand Cayman")
        eq_(self.record.technical_contacts[0].zip, "KY1-1108")
        eq_(self.record.technical_contacts[0].state, "George Town")
        eq_(self.record.technical_contacts[0].country, None)
        eq_(self.record.technical_contacts[0].country_code, "KY")
        eq_(self.record.technical_contacts[0].phone, "+1.3457496263")
        eq_(self.record.technical_contacts[0].fax, "+1.3457496263")
        eq_(self.record.technical_contacts[0].email, "tech@nic.tattoo")
        eq_(self.record.technical_contacts[0].created_on, None)
        eq_(self.record.technical_contacts[0].updated_on, None)

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2013-11-09 02:51:24 UTC'))

    def test_domain_id(self):
        eq_(self.record.domain_id, "DO_4810ec9890fdf872f2e23b58df485dc4-ISC")

    def test_expires_on(self):
        eq_(self.record.expires_on.__class__.__name__, 'datetime')
        eq_(self.record.expires_on, time_parse('2023-09-16 14:21:26 UTC'))
