
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.ascio.com/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisAscioComStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.ascio.com/status_registered.txt"
        host         = "whois.ascio.com"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'registered')

    def test_available(self):
        eq_(self.record.available, False)

    def test_domain(self):
        eq_(self.record.domain, "ascio.com")

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 4)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "ns1.ascio.net")
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "ns2.ascio.net")
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "ns3.ascio.net")
        eq_(self.record.nameservers[3].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[3].name, "ns4.ascio.net")

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].name, "Technical Hostmaster")
        eq_(self.record.admin_contacts[0].organization, "Speednames")
        eq_(self.record.admin_contacts[0].address, "Rejsbygade 8a")
        eq_(self.record.admin_contacts[0].city, "Copenhagen")
        eq_(self.record.admin_contacts[0].zip, "1759")
        eq_(self.record.admin_contacts[0].state, "DK")
        eq_(self.record.admin_contacts[0].country_code, "DK")
        eq_(self.record.admin_contacts[0].phone, "+45.33886300")
        eq_(self.record.admin_contacts[0].fax, "+45.33886301")
        eq_(self.record.admin_contacts[0].email, "hostmaster@speednames.com")

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('2005-03-01 14:11:50 UTC'))

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, "106")
        eq_(self.record.registrar.name, "Ascio Technologies, Inc")
        eq_(self.record.registrar.organization, "Ascio Technologies, Inc")
        eq_(self.record.registrar.url, "http://www.ascio.com")

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].name, "Hostmaster Ascio")
        eq_(self.record.registrant_contacts[0].organization, "ASCIO Technologies Inc.")
        eq_(self.record.registrant_contacts[0].address, "Islands Brygge 55")
        eq_(self.record.registrant_contacts[0].city, "Copenhagen")
        eq_(self.record.registrant_contacts[0].zip, "2300")
        eq_(self.record.registrant_contacts[0].state, "S")
        eq_(self.record.registrant_contacts[0].country_code, "DK")
        eq_(self.record.registrant_contacts[0].phone, None)
        eq_(self.record.registrant_contacts[0].fax, None)
        eq_(self.record.registrant_contacts[0].email, None)

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts.__class__.__name__, 'list')
        eq_(len(self.record.technical_contacts), 1)
        eq_(self.record.technical_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.technical_contacts[0].type, yawhois.record.Contact.TYPE_TECHNICAL)
        eq_(self.record.technical_contacts[0].name, "Netnames Hostmaster")
        eq_(self.record.technical_contacts[0].organization, "Group NBT")
        eq_(self.record.technical_contacts[0].address, "3rd Floor Prospero House, 241 Borough High St.")
        eq_(self.record.technical_contacts[0].city, "London")
        eq_(self.record.technical_contacts[0].zip, "SE1 1GA")
        eq_(self.record.technical_contacts[0].state, None)
        eq_(self.record.technical_contacts[0].country_code, "GB")
        eq_(self.record.technical_contacts[0].phone, "+44.2070159370")
        eq_(self.record.technical_contacts[0].fax, "+44.2070159375")
        eq_(self.record.technical_contacts[0].email, "hostmaster@netnames.net")

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2013-06-02 00:23:21 UTC'))

    def test_domain_id(self):
        eq_(self.record.domain_id, None)

    def test_expires_on(self):
        eq_(self.record.expires_on.__class__.__name__, 'datetime')
        eq_(self.record.expires_on, time_parse('2014-05-31 00:00:00 UTC'))
