
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.nic.it/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisNicItStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.nic.it/status_registered.txt"
        host         = "whois.nic.it"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'registered')

    def test_available(self):
        eq_(self.record.available, False)

    def test_domain(self):
        eq_(self.record.domain, "google.it")

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 4)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "ns1.google.com")
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "ns4.google.com")
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "ns2.google.com")
        eq_(self.record.nameservers[3].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[3].name, "ns3.google.com")

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].id, "DUP142437129")
        eq_(self.record.admin_contacts[0].name, "Tsao Tu")
        eq_(self.record.admin_contacts[0].organization, "Tu Tsao")
        eq_(self.record.admin_contacts[0].address, "70 Sir John Rogersons Quay")
        eq_(self.record.admin_contacts[0].city, "Dublin")
        eq_(self.record.admin_contacts[0].zip, "2")
        eq_(self.record.admin_contacts[0].state, "IE")
        eq_(self.record.admin_contacts[0].country, None)
        eq_(self.record.admin_contacts[0].country_code, "IE")
        eq_(self.record.admin_contacts[0].phone, None)
        eq_(self.record.admin_contacts[0].fax, None)
        eq_(self.record.admin_contacts[0].email, None)
        eq_(self.record.admin_contacts[0].created_on, time_parse('2013-04-21 01:05:35'))
        eq_(self.record.admin_contacts[0].updated_on, time_parse('2013-04-21 01:05:35'))

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('1999-12-10 00:00:00'))

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, "MARKMONITOR-REG")
        eq_(self.record.registrar.name, "MARKMONITOR-REG")
        eq_(self.record.registrar.organization, "MarkMonitor International Limited")
        eq_(self.record.registrar.url, "https://www.markmonitor.com/")

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].id, "DUP430692088")
        eq_(self.record.registrant_contacts[0].name, "Google Ireland Holdings")
        eq_(self.record.registrant_contacts[0].organization, "Google Ireland Holdings")
        eq_(self.record.registrant_contacts[0].address, "70 Sir John Rogersons Quay")
        eq_(self.record.registrant_contacts[0].city, "Dublin")
        eq_(self.record.registrant_contacts[0].zip, "2")
        eq_(self.record.registrant_contacts[0].state, "IE")
        eq_(self.record.registrant_contacts[0].country, None)
        eq_(self.record.registrant_contacts[0].country_code, "IE")
        eq_(self.record.registrant_contacts[0].phone, None)
        eq_(self.record.registrant_contacts[0].fax, None)
        eq_(self.record.registrant_contacts[0].email, None)
        eq_(self.record.registrant_contacts[0].created_on, time_parse('2013-04-21 01:05:35'))
        eq_(self.record.registrant_contacts[0].updated_on, time_parse('2013-04-21 01:05:35'))

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts[0].id, "DUP430692088")
        eq_(self.record.technical_contacts[0].name, "Google Ireland Holdings")
        eq_(self.record.technical_contacts[0].organization, "Google Ireland Holdings")
        eq_(self.record.technical_contacts[0].address, "70 Sir John Rogersons Quay")
        eq_(self.record.technical_contacts[0].city, "Dublin")
        eq_(self.record.technical_contacts[0].zip, "2")
        eq_(self.record.technical_contacts[0].state, "IE")
        eq_(self.record.technical_contacts[0].country, None)
        eq_(self.record.technical_contacts[0].country_code, "IE")
        eq_(self.record.technical_contacts[0].phone, None)
        eq_(self.record.technical_contacts[0].fax, None)
        eq_(self.record.technical_contacts[0].email, None)
        eq_(self.record.technical_contacts[0].created_on, time_parse('2013-04-21 01:05:35'))
        eq_(self.record.technical_contacts[0].updated_on, time_parse('2013-04-21 01:05:35'))

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2013-04-21 01:05:35'))

    def test_response_unavailable(self):
        eq_(self.record.response_unavailable, False)

    def test_domain_id(self):
        assert_raises(yawhois.exceptions.AttributeNotSupported, self.record.domain_id)

    def test_expires_on(self):
        eq_(self.record.expires_on.__class__.__name__, 'datetime')
        eq_(self.record.expires_on, time_parse('2014-04-21 00:00:00'))

    def test_disclaimer(self):
        eq_(self.record.disclaimer, "Please note that the following result could be a subgroup of the data contained in the database. Additional information can be visualized at: http://www.nic.it/cgi-bin/Whois/whois.cgi")
