
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.register.com/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisRegisterComStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.register.com/status_registered.txt"
        host         = "whois.register.com"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'registered')

    def test_available(self):
        eq_(self.record.available, False)

    def test_domain(self):
        eq_(self.record.domain, "register.com")

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 6)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "ns2.register.com")
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "ns3.register.com")
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "ns4.register.com")
        eq_(self.record.nameservers[3].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[3].name, "ns5.register.com")
        eq_(self.record.nameservers[4].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[4].name, "ns6.register.com")
        eq_(self.record.nameservers[5].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[5].name, "ns1.register.com")

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].name, "Domain Registrar")
        eq_(self.record.admin_contacts[0].organization, "Register.Com, Inc.")
        eq_(self.record.admin_contacts[0].address, "575 8th Avenue")
        eq_(self.record.admin_contacts[0].city, "New York")
        eq_(self.record.admin_contacts[0].zip, "10018")
        eq_(self.record.admin_contacts[0].state, "NY")
        eq_(self.record.admin_contacts[0].country_code, "US")
        eq_(self.record.admin_contacts[0].phone, "+1.9027492701")
        eq_(self.record.admin_contacts[0].fax, None)
        eq_(self.record.admin_contacts[0].email, "domainregistrar@register.com")

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('1994-11-01T00:00:00-0500'))

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, "9")
        eq_(self.record.registrar.name, "Register.com")
        eq_(self.record.registrar.url, "http://www.register.com")

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].name, "Domain Registrar")
        eq_(self.record.registrant_contacts[0].organization, "Register.Com, Inc.")
        eq_(self.record.registrant_contacts[0].address, "575 8th Avenue")
        eq_(self.record.registrant_contacts[0].city, "New York")
        eq_(self.record.registrant_contacts[0].zip, "10018")
        eq_(self.record.registrant_contacts[0].state, "NY")
        eq_(self.record.registrant_contacts[0].country_code, "US")
        eq_(self.record.registrant_contacts[0].phone, "+1.9027492701")
        eq_(self.record.registrant_contacts[0].fax, None)
        eq_(self.record.registrant_contacts[0].email, "domainregistrar@register.com")

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts.__class__.__name__, 'list')
        eq_(len(self.record.technical_contacts), 1)
        eq_(self.record.technical_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.technical_contacts[0].type, yawhois.record.Contact.TYPE_TECHNICAL)
        eq_(self.record.technical_contacts[0].name, "Domain Registrar")
        eq_(self.record.technical_contacts[0].organization, "Register.Com, Inc.")
        eq_(self.record.technical_contacts[0].address, "575 8th Avenue")
        eq_(self.record.technical_contacts[0].city, "New York")
        eq_(self.record.technical_contacts[0].zip, "10018")
        eq_(self.record.technical_contacts[0].state, "NY")
        eq_(self.record.technical_contacts[0].country_code, "US")
        eq_(self.record.technical_contacts[0].phone, "+1.9027492701")
        eq_(self.record.technical_contacts[0].fax, None)
        eq_(self.record.technical_contacts[0].email, "domainregistrar@register.com")

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2009-08-26T00:00:00-0400'))

    def test_domain_id(self):
        eq_(self.record.domain_id, None)

    def test_expires_on(self):
        eq_(self.record.expires_on.__class__.__name__, 'datetime')
        eq_(self.record.expires_on, time_parse('2019-08-04T00:00:00-0400'))
