
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/org-whois.registry.net.za/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestOrgWhoisRegistryNetZaStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/org-whois.registry.net.za/status_registered.txt"
        host         = "org-whois.registry.net.za"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'registered')

    def test_available(self):
        eq_(self.record.available, False)

    def test_domain(self):
        eq_(self.record.domain, "joburg.org.za")

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 3)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "demeter.is.co.za")
        eq_(self.record.nameservers[0].ipv4, None)
        eq_(self.record.nameservers[0].ipv6, None)
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "jupiter.is.co.za")
        eq_(self.record.nameservers[1].ipv4, None)
        eq_(self.record.nameservers[1].ipv6, None)
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "titan.is.co.za")
        eq_(self.record.nameservers[2].ipv4, None)
        eq_(self.record.nameservers[2].ipv6, None)

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].id, "zacr-a0c0379446")
        eq_(self.record.admin_contacts[0].name, "Joelson Pholoha")
        eq_(self.record.admin_contacts[0].organization, None)
        eq_(self.record.admin_contacts[0].address, "Private Bag X10013, Sandton, 2146")
        eq_(self.record.admin_contacts[0].city, "-")
        eq_(self.record.admin_contacts[0].zip, None)
        eq_(self.record.admin_contacts[0].country, None)
        eq_(self.record.admin_contacts[0].country_code, "--")
        eq_(self.record.admin_contacts[0].phone, "+27.110186314")
        eq_(self.record.admin_contacts[0].fax, "+27.113819583")
        eq_(self.record.admin_contacts[0].email, "Joelsonp@Joburg.org.za")
        eq_(self.record.admin_contacts[0].created_on, None)
        eq_(self.record.admin_contacts[0].updated_on, None)

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('1997-10-03 09:46:34 UTC'))

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, "9999")
        eq_(self.record.registrar.name, "ZA Central Registry")
        eq_(self.record.registrar.organization, "ZA Central Registry")
        eq_(self.record.registrar.url, None)

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].id, "jobuRant")
        eq_(self.record.registrant_contacts[0].name, "City of Johannesburg Metropolitan Municipality")
        eq_(self.record.registrant_contacts[0].organization, None)
        eq_(self.record.registrant_contacts[0].address, "P.O. Box 30757")
        eq_(self.record.registrant_contacts[0].city, "Braamfontein")
        eq_(self.record.registrant_contacts[0].state, "Gauteng")
        eq_(self.record.registrant_contacts[0].zip, "2017")
        eq_(self.record.registrant_contacts[0].country, None)
        eq_(self.record.registrant_contacts[0].country_code, "ZA")
        eq_(self.record.registrant_contacts[0].phone, "+27.110186314")
        eq_(self.record.registrant_contacts[0].fax, "+27.113819583")
        eq_(self.record.registrant_contacts[0].email, "joelsonp@joburg.org.za")
        eq_(self.record.registrant_contacts[0].created_on, None)
        eq_(self.record.registrant_contacts[0].updated_on, None)

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts.__class__.__name__, 'list')
        eq_(len(self.record.technical_contacts), 1)
        eq_(self.record.technical_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.technical_contacts[0].type, yawhois.record.Contact.TYPE_TECHNICAL)
        eq_(self.record.technical_contacts[0].id, "zacr-71fff5bce2")
        eq_(self.record.technical_contacts[0].name, "Eben Jacobs")
        eq_(self.record.technical_contacts[0].organization, None)
        eq_(self.record.technical_contacts[0].address, "Accounts Payable, Vida Building, Kabelweg 57, 1014 BA Amsterdam")
        eq_(self.record.technical_contacts[0].city, "-")
        eq_(self.record.technical_contacts[0].zip, None)
        eq_(self.record.technical_contacts[0].country, None)
        eq_(self.record.technical_contacts[0].country_code, "--")
        eq_(self.record.technical_contacts[0].phone, "+27.110186314")
        eq_(self.record.technical_contacts[0].fax, "+27.113819583")
        eq_(self.record.technical_contacts[0].email, "ebenj@joburg.org.za")
        eq_(self.record.technical_contacts[0].created_on, None)
        eq_(self.record.technical_contacts[0].updated_on, None)

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2015-02-05 08:45:51 UTC'))

    def test_domain_id(self):
        eq_(self.record.domain_id, "dom_8VP-9999")

    def test_expires_on(self):
        eq_(self.record.expires_on.__class__.__name__, 'datetime')
        eq_(self.record.expires_on, time_parse('2999-12-31 21:59:59 UTC'))
