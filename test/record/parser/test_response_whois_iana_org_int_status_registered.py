
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.iana.org/int/status_registered
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisIanaOrgIntStatusRegistered(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.iana.org/int/status_registered.txt"
        host         = "whois.iana.org"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'registered')

    def test_available(self):
        eq_(self.record.available, False)

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 7)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "globe.nc3a.nato.int")
        eq_(self.record.nameservers[0].ipv4, "192.41.140.178")
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "max.nra.nato.int")
        eq_(self.record.nameservers[1].ipv4, "192.101.252.69")
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "maxima.nra.nato.int")
        eq_(self.record.nameservers[2].ipv4, "193.110.130.68")
        eq_(self.record.nameservers[3].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[3].name, "ns.namsa.nato.int")
        eq_(self.record.nameservers[3].ipv4, "193.168.11.15")
        eq_(self.record.nameservers[4].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[4].name, "ns.saclantc.nato.int")
        eq_(self.record.nameservers[4].ipv4, "192.106.197.1")
        eq_(self.record.nameservers[5].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[5].name, "ns1.cs.ucl.ac.uk")
        eq_(self.record.nameservers[5].ipv4, "128.16.5.32")
        eq_(self.record.nameservers[6].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[6].name, "ns1.drenet.dnd.ca")
        eq_(self.record.nameservers[6].ipv4, "131.136.242.3")

    def test_admin_contacts(self):
        eq_(self.record.admin_contacts.__class__.__name__, 'list')
        eq_(len(self.record.admin_contacts), 1)
        eq_(self.record.admin_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.admin_contacts[0].type, yawhois.record.Contact.TYPE_ADMINISTRATIVE)
        eq_(self.record.admin_contacts[0].id, None)
        eq_(self.record.admin_contacts[0].name, "Aidan Murdock")
        eq_(self.record.admin_contacts[0].organization, None)
        eq_(self.record.admin_contacts[0].address, "SHAPE")
        eq_(self.record.admin_contacts[0].city, "NCIA SP SDD SAS NAR")
        eq_(self.record.admin_contacts[0].zip, "Mons Hainaut 7010")
        eq_(self.record.admin_contacts[0].country, "Belgium")
        eq_(self.record.admin_contacts[0].country_code, None)
        eq_(self.record.admin_contacts[0].phone, "+32 65 44 9168")
        eq_(self.record.admin_contacts[0].fax, "+32 65 44 9480")
        eq_(self.record.admin_contacts[0].email, "aidan.murdock@ncia.nato.int")
        eq_(self.record.admin_contacts[0].created_on, None)
        eq_(self.record.admin_contacts[0].updated_on, None)

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('1997-08-26'))

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].id, None)
        eq_(self.record.registrant_contacts[0].name, None)
        eq_(self.record.registrant_contacts[0].organization, "North Atlantic Treaty Organization")
        eq_(self.record.registrant_contacts[0].address, "Blvd Leopold III")
        eq_(self.record.registrant_contacts[0].city, "1110 Brussels")
        eq_(self.record.registrant_contacts[0].zip, "Brussels")
        eq_(self.record.registrant_contacts[0].country, "Belgium")
        eq_(self.record.registrant_contacts[0].country_code, None)
        eq_(self.record.registrant_contacts[0].phone, None)
        eq_(self.record.registrant_contacts[0].fax, None)
        eq_(self.record.registrant_contacts[0].email, None)
        eq_(self.record.registrant_contacts[0].created_on, None)
        eq_(self.record.registrant_contacts[0].updated_on, None)

    def test_technical_contacts(self):
        eq_(self.record.technical_contacts.__class__.__name__, 'list')
        eq_(len(self.record.technical_contacts), 1)
        eq_(self.record.technical_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.technical_contacts[0].type, yawhois.record.Contact.TYPE_TECHNICAL)
        eq_(self.record.technical_contacts[0].id, None)
        eq_(self.record.technical_contacts[0].name, "Francesco Conserva")
        eq_(self.record.technical_contacts[0].organization, None)
        eq_(self.record.technical_contacts[0].address, "SHAPE")
        eq_(self.record.technical_contacts[0].city, "NCIA SP SMD ENT EMA")
        eq_(self.record.technical_contacts[0].zip, "Mons Hainaut 7010")
        eq_(self.record.technical_contacts[0].country, "Belgium")
        eq_(self.record.technical_contacts[0].country_code, None)
        eq_(self.record.technical_contacts[0].phone, "+32 65 44 7534")
        eq_(self.record.technical_contacts[0].fax, "+32 65 44 7556")
        eq_(self.record.technical_contacts[0].email, "francesco.conserva@ncia.nato.int")
        eq_(self.record.technical_contacts[0].created_on, None)
        eq_(self.record.technical_contacts[0].updated_on, None)

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2012-08-07'))

    def test_expires_on(self):
        assert_raises(yawhois.exceptions.AttributeNotSupported, self.record.expires_on)
