
# This file is autogenerated. Do not edit it manually.
# If you want change the content of this file, edit
#
#   spec/fixtures/responses/whois.nic.uk/status_reserved
#
# and regenerate the tests with the following script
#
#   $ scripts/generate_tests.py
#

from nose.tools import *
from dateutil.parser import parse as time_parse
import yawhois

class TestWhoisNicUkStatusReserved(object):

    def setUp(self):
        fixture_path = "spec/fixtures/responses/whois.nic.uk/status_reserved.txt"
        host         = "whois.nic.uk"
        part         = yawhois.record.Part(open(fixture_path, "r").read(), host)
        self.record  = yawhois.record.Record(None, [part])

    def test_status(self):
        eq_(self.record.status, 'reserved')

    def test_available(self):
        eq_(self.record.available, False)

    def test_nameservers(self):
        eq_(self.record.nameservers.__class__.__name__, 'list')
        eq_(len(self.record.nameservers), 3)
        eq_(self.record.nameservers[0].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[0].name, "nom-ns1.nominet.org.uk")
        eq_(self.record.nameservers[0].ipv4, "213.248.199.16")
        eq_(self.record.nameservers[0].ipv6, None)
        eq_(self.record.nameservers[1].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[1].name, "nom-ns2.nominet.org.uk")
        eq_(self.record.nameservers[1].ipv4, "195.66.240.250")
        eq_(self.record.nameservers[1].ipv6, "2a01:40:1001:37::2")
        eq_(self.record.nameservers[2].__class__.__name__, 'Nameserver')
        eq_(self.record.nameservers[2].name, "nom-ns3.nominet.org.uk")
        eq_(self.record.nameservers[2].ipv4, "213.219.13.194")
        eq_(self.record.nameservers[2].ipv6, None)

    def test_registered(self):
        eq_(self.record.registered, True)

    def test_response_throttled(self):
        eq_(self.record.response_throttled, False)

    def test_invalid(self):
        eq_(self.record.invalid, False)

    def test_created_on(self):
        eq_(self.record.created_on.__class__.__name__, 'datetime')
        eq_(self.record.created_on, time_parse('1996-08-01'))

    def test_valid(self):
        eq_(self.record.valid, True)

    def test_registrar(self):
        eq_(self.record.registrar.__class__.__name__, 'Registrar')
        eq_(self.record.registrar.id, None)
        eq_(self.record.registrar.name, "Nominet")
        eq_(self.record.registrar.organization, "Nominet UK")
        eq_(self.record.registrar.url, "http://www.nic.uk/")

    def test_registrant_contacts(self):
        eq_(self.record.registrant_contacts.__class__.__name__, 'list')
        eq_(len(self.record.registrant_contacts), 1)
        eq_(self.record.registrant_contacts[0].__class__.__name__, 'Contact')
        eq_(self.record.registrant_contacts[0].type, yawhois.record.Contact.TYPE_REGISTRANT)
        eq_(self.record.registrant_contacts[0].id, None)
        eq_(self.record.registrant_contacts[0].name, "Nominet UK")
        eq_(self.record.registrant_contacts[0].organization, None)
        eq_(self.record.registrant_contacts[0].address, "Minerva House, Edmund Halley Road\nOxford Science Park")
        eq_(self.record.registrant_contacts[0].city, "Oxford")
        eq_(self.record.registrant_contacts[0].zip, "OX4 4DQ")
        eq_(self.record.registrant_contacts[0].state, "Oxon")
        eq_(self.record.registrant_contacts[0].country, "United Kingdom")

    def test_updated_on(self):
        eq_(self.record.updated_on.__class__.__name__, 'datetime')
        eq_(self.record.updated_on, time_parse('2012-03-23'))

    def test_expires_on(self):
        eq_(self.record.expires_on, None)
